version: '3.8'

services:
  # OmniCache Demo Application
  omnicache-demo:
    build:
      context: .
      dockerfile: demo/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
      - ENVIRONMENT=docker
    depends_on:
      - redis
      - prometheus
    volumes:
      - ./demo:/app/demo
      - ./src:/app/src
    networks:
      - omnicache-network

  # Redis for L2 hierarchical caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - omnicache-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./demo/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - omnicache-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./demo/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./demo/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - omnicache-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - omnicache-network

  # ElasticSearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - omnicache-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - omnicache-network

  # Load generator for testing
  load-generator:
    build:
      context: .
      dockerfile: demo/Dockerfile.loadgen
    environment:
      - TARGET_URL=http://omnicache-demo:8000
      - CONCURRENT_USERS=10
      - REQUESTS_PER_SECOND=50
    depends_on:
      - omnicache-demo
    networks:
      - omnicache-network
    profiles:
      - load-test

  # Cache performance monitor
  cache-monitor:
    build:
      context: .
      dockerfile: demo/Dockerfile.monitor
    environment:
      - DEMO_API_URL=http://omnicache-demo:8000
      - PROMETHEUS_URL=http://prometheus:9090
      - MONITOR_INTERVAL=30
    depends_on:
      - omnicache-demo
      - prometheus
    networks:
      - omnicache-network
    volumes:
      - ./demo/monitoring:/app/monitoring

networks:
  omnicache-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data: